name: Build and Push Image (Using Docker buildx)
on:
  merge_group:
  workflow_dispatch:

  schedule:
    - cron: '30 14 * * *'  # 14:30 UTC everyday (2:30 PM UTC everyday) (8:30 AM CST everyday)

  pull_request:
    branches:
      - bluefin-main
      - testing
    paths-ignore:
      - '**.md'
  push:
    branches:
      - bluefin-main
      - testing
    paths-ignore:
      - '**.md'

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}

env:
  IMAGE_NAME:
  AKMODS_FLAVOR:
  DOCKER_BUILDKIT: 1
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build using Docker Buildx
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: [asus]
        base_name: [bluefin-dx]
        major_version: [39]
        include:
          - major_version: 39
            is_latest_version: true
            is_stable_version: true
            is_gts_version: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check just syntax
        uses: ublue-os/just-action@v1

      - name: Verify base image
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          containers: silverblue-${{ matrix.image_flavor }}:${{ matrix.major_version }}

      - name: Verify Chainguard images
        if: matrix.base_name != 'bluefin'
        uses: EyeCantCU/cosign-action/verify@v0.2.2
        with:
          registry: cgr.dev/chainguard
          containers: dive, flux, helm, ko, minio, kubectl
          oidc-issuer: https://token.actions.githubusercontent.com
          cert-identity: https://github.com/chainguard-images/images/.github/workflows/release.yaml@refs/heads/main

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v6

      - name: Matrix Variables
        run: |
          if [[ "${{ matrix.image_flavor }}" == "main" ]]; then
              echo "IMAGE_NAME=${{ matrix.base_name }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ format('{0}-{1}', matrix.base_name, matrix.image_flavor) }}" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.image_flavor }}" =~ "asus" ]]; then
              echo "AKMODS_FLAVOR=asus" >> $GITHUB_ENV
          elif [[ "${{ matrix.image_flavor }}" =~ "surface" ]]; then
              echo "AKMODS_FLAVOR=surface" >> $GITHUB_ENV
          else
              echo "AKMODS_FLAVOR=main" >> $GITHUB_ENV
          fi

      - name: Get Current Fedora Version
        id: labels
        shell: bash
        run: |
          set -eo pipefail
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/silverblue-${{ matrix.image_flavor }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          if [ -z "$ver" ] || [ "null" = "$ver" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4
            org.opencontainers.image.description=An interpretation of the Ubuntu spirit built on Fedora technology
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/bluefin/bluefin/README.md
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha 
            type=schedule
            type=semver,pattern={{major}}
            type=semver,pattern={{version}}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          oci: false
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: |
            ./Containerfile
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            AKMODS_FLAVOR=${{ env.AKMODS_FLAVOR }}
            IMAGE_FLAVOR=${{ matrix.image_flavor }}
            IMAGE_VENDOR=${{ github.repository_owner }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          extra-args: |
            --target=${{ matrix.base_name }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        id: push
        if: github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          tags: ${{ steps.build_image.outputs.tags }}
          image: ${{ steps.build_image.outputs.image }}
          registry: ${{ steps.registry_case.outputs.lowercase }}

      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          COSIGN_EXPERIMENTAL: false
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.build_image.outputs) }}"

  check:
    name: Check all builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [push-ghcr]
    steps:
      - name: Exit on failure
        if: ${{ needs.push-ghcr.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
